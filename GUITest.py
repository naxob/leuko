import wx
from numpy import *
from copy import deepcopy
import weakref
import SortFile
import hashlib
import matplotlib.pyplot as plt
#import matplotlib.patches as patches
import matplotlib.patches as patches
import math
import sys
"""
def getgenpos(array, gencolname, *delimiter):      
        if type(array) == str and array.index('.'):
            file = open(array, 'r')            
            array = file.readline()
            array = array.split(delimiter[0])   
            file.close()         
        if(type(gencolname) == str):
            if type(array[0]) == list:
                return array[0].index(gencolname)
            else:
                return array.index(gencolname)
        elif type(gencolname) == list :
            indexarray = []
            if type(array[0]) == list:            
                for elem in gencolname:           
                    indexarray.append(array[0].index(elem))
            else:
                for elem in gencolname:           
                    indexarray.append(array.index(elem))
            return indexarray  


def md5Checksum(filePath):
    with open(filePath, 'rb') as fh:
        m = hashlib.md5()
        while True:
            data = fh.read(8192)
            if not data:
                break
            m.update(data)
        return m.hexdigest()

def checkIndexFile(filepath):
    
    indexfilepath = filepath.split('.')
    indexfilepath[0] = indexfilepath[0] + '_index'
    indexfilepath = '.'.join(indexfilepath)

    indexfilepath = indexfilepath.split('/')
    indexfilepath[0] = 'indexfiles'
    indexfilepath = '/'.join(indexfilepath)
    try:
        f = open(indexfilepath, 'r')
        md5check = md5Checksum(filepath)
        md5file = f.readline().strip()
        #print 'mdcheck '+str(mdcheck)+' mdfile '+str(mdfile)
        if md5check == md5file:
            print 'file ' + str(indexfilepath) + ' exists and hashes equal.'            
            f.close()
            return True
        else:
            print 'file ' + str(indexfilepath) + ' exists but wrong hash value.'
            raise IOError
        
    except IOError:
        print 'file ' + str(indexfilepath) + ' does not exist. creating file'
        createIndexFile(filepath, getgenpos(filepath, 'name2', '\t'))
        return True

def getIndexOffset(gene, filepath):
    if not gene or not filepath:
        return None
    else:
        indexfilepath = filepath.split('.')
        indexfilepath[0] = indexfilepath[0] + '_index'
        indexfilepath = '.'.join(indexfilepath)
    
        indexfilepath = indexfilepath.split('/')
        indexfilepath[0] = 'indexfiles'
        indexfilepath = '/'.join(indexfilepath)
        print indexfilepath
        
        f = open(indexfilepath, 'r')
        f.readline()
        for l in f:
            line = l.strip().split('\t')
            if gene[:2] == line[0]:
                f.close()
                return line[1]
        f.close()
        return None            
       
        
    

def createIndexFile(filepath, genepos):
    
    f = open(filepath, 'r')
    head = f.readline()
    preoffset = f.tell()
    preline = f.readline().split('\t')
    postline = deepcopy(preline)
    postoffset = f.tell()
    temp = []
    index = []
    temp.append(preline[genepos][:2])
    temp.append(str(preoffset) + '\n')
    index.append(temp)
    try:
        while True:
            preoffset = f.tell()
            preline = f.readline().split('\t')
            
            
            if preline[genepos][:2] != postline[genepos][:2]:
                temp = []
                temp.append(preline[genepos][:2])
                temp.append(str(preoffset) + '\n')
                index.append(temp)
                
                #print '\npostline '+str(postline)
                #print 'preline '+str(preline)
                #print 'temp '+str(temp)
                ##print 'index '+str(index)
                               
            
            postline = deepcopy(preline)
            postoffset = long(preoffset)
    except IndexError:
            'Index Error'    
    f.close()
    print 'index und hashwert berechnen'
    index.insert(0, str(md5Checksum(filepath)) + '\n')
    
    filepath = filepath.split('.')
    filepath[0] = filepath[0] + '_index'
    filepath = '.'.join(filepath)
    
    filepath = filepath.split('/')
    filepath[0] = 'indexfiles'
    filepath = '/'.join(filepath)
        
    f = open(filepath, 'w')
    f.write(index[0])
    for v in index[1:]:
        f.write('\t'.join(v))
    f.close
    print 'file ' + filepath + ' created'
    

def getExon(genepos, values):
    #checkIndexFile('test/refGene.tsv')
    #LOC256021 multiple entries in refgene
    refgene = open('test/refGene.tsv', 'r')
    f3 = open('indexfiles/refGene_index.tsv', 'r')
    f3.readline()
    d = {}
    i = 0
    for line in f3:
        l = line.strip().split('\t')
        d.setdefault(l[0], l[1])
        i = i + 1
    f3.close()
    genelist = []
    
                     
    #ersten zwei anfangsbuchstaben des gens der genexprdatei in der indexdatei suchen und dorthin springen
    off = d.setdefault(values[0][genepos][:2])
    refgene.seek(long(off))
    print 'offset ' + str(off)
    #solange die ersten beiden buchstaben aus genexpr und refgene gleich sind geht er die refgene durch  
    refline = refgene.readline().strip().split('\t')
    while values[0][genepos][:2] == refline[12][:2] :
        if values[0][genepos] == refline[12]:            
            #print 'expr ' + values[0][genepos] + ' ref ' + refline[12] 
            genelist.append(refline)
        elif values[0][genepos] != refline[12] and genelist:
            break
        refline = refgene.readline().strip().split('\t')  
          
    else:
        if not genelist:
            print 'Gene ' + values[0][genepos] + ' not found in refGene file'
            refgene.close()
            return None   
    refgene.close()    
                
    #zieht sich aus der probesets den start und stop bereich
    refgenestartstoplist = []
    for v in genelist:
        refstart = v[9].split(',')
        refstop = v[10].split(',')
        trans = v[1]
        refstart = filter(None, refstart)
        refstop = filter(None, refstop)                   
        refgenestartstoplist.append([refstart, refstop,trans])
    #geht die transkript liste durch ueberprueft jedes probeset ob es in dem bereich liegt
    trans = []
    for t in refgenestartstoplist:
        temp = []
        j=0
        for p in values:
            i = 0
            while i < len(t[0]):
                if long(t[0][i]) <= long(p[14]) and  long(p[15]) <= long(t[1][i]):                    
                    temp.append([j,t[0][i]])
                i=i+1
            j=j+1
        trans.append(temp)
    
    return trans

    
values = [
['Probe Set ID', 'Gene Symbol', 'Probe Count', 'Transcript Cluster Id', 'Exon ID', 'PSR ID', 'mRNA - Accession', 'mRNA - Assignment Chromosome', 'mRNA - Assignment Score', 'mRNA - Direct Probes', 'mRNA - Possible Probes', 'mRNA - xhyb', 'Chromosome', 'Strand', 'Start', 'Stop', 'Probe Set Type', 'Cross-hyb type', 'Number independent probes', 'Number cross-hyb probes', 'Number nonoverlapping probes', 'Level', 'Bounded', 'No Bounded Evidence', 'Has CDS', 'fl', 'mRNA', 'est', 'vegaGENE', 'vegaPseudoGene', 'ensGene', 'sgpGene', 'exoniphy', 'twinscan', 'genscan', 'genscanSubopt', 'microRNAregistry', 'rnaGene', 'mitomap', 'geneid', '0791', '4_0874-08', '0826-08', '5_0890-08', '0834-08', '2_0847-08', '0940-08', '0856-08', '6_0944-08', '3_0861-08', '0952-08', '0980-08', '1062-08', '1079-08', '1307-09', '9_0315-09', '10_0321-09', '11_0327-09', '7_0303-09', '8_0309-09', '0791p-value', '4_0874-08p-value', '0826-08p-value', '5_0890-08p-value', '0834-08p-value', '2_0847-08p-value', '0940-08p-value', '0856-08p-value', '6_0944-08p-value', '3_0861-08p-value', '0952-08p-value', '0980-08p-value', '1062-08p-value', '1079-08p-value', '1307-09p-value', '0903-08p-value', '10_0321-09p-value', '11_0327-09p-value', '7_0303-09p-value', '8_0309-09p-value', '0903-08', '9_0315-09p-value\n'],
['2315383', 'LOC643837', '4', '2315380', '168', '203', 'ENST00000415295', 'chr1', '100', '4', '4', 'FALSE', 'chr01', '+', '767017', '767057', 'main', '1', '2', '0', '1', 'extended', 'false', 'false', 'false', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '5.208148', '4.420412', '4.187621', '3.856906', '5.146029', '2.887514', '4.27254', '2.982579', '5.521056', '4.618201', '2.989295', '3.090646', '4.826795', '2.778801', '3.854121', '3.548894', '3.419964', '3.267652', '3.6481', '3.287685', '2.761776E-06', '0.000347487', '0.001571961', '0.003414764', '0.0003572961', '0.02988488', '0.0003146581', '0.06571556', '1.264766E-05', '0.0001685035', '0.0733341', '0.05028178', '0.0002423057', '0.04715095', '0.003138025', '0.005035262', '0.003534672', '0.01249232', '0.005243212', '0.007837556', '3.481047', '0.003636219\n'],
['2315384', 'LOC643837', '4', '2315380', '169', '204', '---', '---', '---', '---', '---', '---', 'chr01', '+', '775107', '775303', 'main', '1', '4', '0', '4', 'extended', 'true', 'false', 'false', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '5.581069', '4.974221', '5.56424', '5.304201', '6.113735', '4.749203', '5.54978', '4.650754', '5.417761', '6.107177', '4.81422', '4.392858', '4.999867', '4.864355', '5.726738', '4.481242', '5.44431', '4.780517', '5.326622', '4.599895', '0.002322849', '0.02190477', '0.009172012', '0.006627157', '0.0008124901', '0.03756022', '0.001077119', '0.05062932', '0.003599727', '0.0004688106', '0.02134309', '0.06217168', '0.01694991', '0.009626211', '0.001477707', '0.01866123', '0.0008566096', '0.01564651', '0.01057578', '0.03138343', '4.937569', '0.03006228\n'],
['2315385', 'LOC643837', '4', '2315380', '170', '205', '---', '---', '---', '---', '---', '---', 'chr01', '+', '775456', '775516', 'main', '1', '3', '0', '2', 'extended', 'true', 'false', 'false', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '5.583812', '5.006443', '5.233409', '5.119011', '6.716087', '4.954105', '6.149085', '4.754599', '6.232173', '6.018264', '3.99239', '4.606192', '5.459988', '4.352004', '6.334941', '4.912463', '5.29271', '5.445232', '5.451807', '4.968131', '3.697808E-06', '6.40368E-05', '1.165077E-05', '1.827932E-05', '2.688689E-07', '2.42419E-05', '3.574886E-07', '0.0004655753', '3.261128E-06', '7.335104E-06', '0.001695655', '0.0004046193', '2.602961E-05', '0.0001718036', '1.692991E-06', '3.172416E-07', '1.316635E-05', '5.718389E-07', '5.52687E-06', '1.511349E-05', '5.768157', '2.260229E-05\n'],
['2315386', 'LOC643837', '4', '2315380', '171', '206', 'ENST00000441765', 'chr1', '100', '4', '4', 'FALSE', 'chr01', '+', '776588', '776750', 'main', '1', '4', '0', '3', 'extended', 'false', 'false', 'false', '0', '0', '6', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '6.780256', '6.781529', '6.977609', '6.591732', '6.960534', '6.432296', '6.795813', '7.179169', '7.711492', '7.420943', '6.801305', '6.804957', '6.81908', '6.484047', '7.494961', '6.534122', '6.902216', '6.929272', '6.713932', '7.065702', '0.002291412', '0.009064171', '0.00518656', '0.008117335', '0.00735707', '0.01648053', '0.00448896', '0.005885403', '0.0004486424', '0.0009656537', '0.007379095', '0.00509591', '0.006530565', '0.00975717', '0.0003281064', '0.007748966', '0.001934126', '0.001826427', '0.01335004', '0.0006553377', '6.689943', '0.005328441\n'],
['2315387', 'LOC643837', '4', '2315380', '171', '207', 'ENST00000415295', 'chr1', '100', '4', '4', 'FALSE', 'chr01', '+', '776908', '777304', 'main', '1', '4', '0', '3', 'extended', 'false', 'false', 'false', '0', '0', '3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '7.88841', '7.663682', '7.756181', '7.400091', '7.409182', '8.097313', '7.701691', '7.867576', '8.051974', '7.923624', '7.34304', '8.262228', '7.623104', '6.825114', '7.710206', '7.121187', '7.786956', '7.370878', '7.913406', '7.926323', '0.0001560759', '0.0003207952', '0.0005000368', '0.0003667691', '0.001604492', '9.584032E-05', '0.0002765316', '0.0004887084', '0.0001037443', '0.0001261714', '0.001338695', '6.194721E-05', '0.0004277726', '0.00371862', '8.408685E-05', '0.0004235576', '0.000142842', '0.000670036', '0.0001178669', '0.0001327239', '7.556688', '0.001583261\n'],
['2315388', 'LOC643837', '4', '2315380', '172', '208', 'BC086872', 'chr1', '75', '3', '4', 'FALSE', 'chr01', '+', '778549', '778833', 'main', '1', '4', '0', '4', 'extended', 'true', 'false', 'false', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '7.822044', '7.936753', '8.112076', '7.875948', '8.090308', '8.036867', '7.868166', '8.312869', '8.076068', '7.736727', '7.945393', '8.254068', '7.991999', '7.865054', '7.456775', '7.620643', '7.841385', '7.911946', '8.215693', '7.345538', '2.09156E-05', '1.857324E-05', '1.039937E-05', '2.493044E-05', '4.226462E-05', '3.02204E-05', '1.866494E-05', '1.003071E-05', '1.754289E-05', '2.796723E-05', '2.682671E-05', '4.289182E-06', '1.905281E-05', '1.235513E-05', '2.453598E-05', '1.275605E-05', '1.756302E-05', '9.822284E-06', '3.579303E-06', '5.450464E-05', '8.169418', '3.853922E-05\n'],
['2315389', 'LOC643837', '4', '2315380', '173', '209', '---', '---', '---', '---', '---', '---', 'chr01', '+', '779074', '779287', 'main', '1', '4', '0', '4', 'extended', 'true', 'false', 'false', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '5.200209', '5.234753', '4.584249', '4.919648', '5.274009', '5.46879', '5.416194', '4.904307', '5.628337', '6.040194', '5.392716', '5.056201', '5.756591', '5.387725', '5.516158', '5.652388', '5.554803', '4.747883', '5.444762', '4.611647', '0.0592323', '0.1083319', '0.0645183', '0.1044961', '0.2745759', '0.1025469', '0.068508', '0.2120628', '0.08277913', '0.03322821', '0.05578796', '0.1549781', '0.03856102', '0.04047235', '0.02983067', '0.02648037', '0.01281832', '0.2207063', '0.05363961', '0.1944569', '5.562491', '0.02607718\n'],
['2315390', 'LOC643837', '4', '2315380', '174', '210', '---', '---', '---', '---', '---', '---', 'chr01', '+', '779428', '779857', 'main', '1', '4', '0', '3', 'extended', 'true', 'false', 'false', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '6.252148', '5.561551', '5.514196', '5.483389', '6.217614', '5.826776', '6.212836', '5.86556', '5.902485', '5.98448', '4.754105', '6.014125', '6.130394', '5.332539', '5.859806', '5.593753', '5.547522', '5.232306', '6.249947', '5.229547', '1.862968E-05', '0.000699015', '0.002563068', '0.0002935263', '0.0002547484', '0.0002858259', '1.168354E-05', '0.0004939853', '0.0001870555', '4.797786E-05', '0.003800319', '0.0002843718', '0.0001855679', '0.0005538412', '3.115335E-05', '0.001163225', '0.0003014363', '0.001173505', '0.0001162572', '0.0005339678', '5.613752', '0.0002240317\n'],
['2315391', 'LOC643837', '4', '2315380', '175', '211', 'NR_015368', 'chr1', '100', '4', '4', 'FALSE', 'chr01', '+', '783084', '783174', 'main', '1', '4', '0', '3', 'extended', 'false', 'false', 'false', '0', '1', '8', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '8.335037', '8.963774', '9.47671', '8.429649', '9.992208', '8.856773', '8.292979', '8.329299', '9.265324', '9.07056', '7.968398', '8.285548', '8.813093', '7.355723', '8.588551', '7.671128', '7.915981', '8.267879', '8.308452', '7.916473', '2.153976E-06', '5.780374E-07', '9.491581E-08', '2.459452E-06', '5.714227E-08', '7.017857E-07', '2.231002E-06', '6.203741E-06', '2.760395E-07', '1.052858E-07', '9.962569E-06', '4.396787E-06', '1.353105E-06', '3.995554E-05', '2.490116E-07', '5.392436E-06', '1.013834E-05', '1.906828E-06', '1.734589E-06', '7.618033E-06', '8.399181', '9.05339E-06\n'],
['2315392', 'LOC643837', '4', '2315380', '176', '212', 'ENST00000448975', 'chr1', '100', '4', '4', 'FALSE', 'chr01', '+', '784870', '784959', 'main', '1', '4', '0', '3', 'extended', 'false', 'false', 'false', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '4.065107', '4.395191', '4.775228', '4.435935', '6.287082', '4.25347', '4.235337', '4.111786', '4.825919', '4.94603', '5.237284', '4.301311', '4.687175', '4.324183', '4.491566', '3.911809', '4.394929', '4.011796', '4.565914', '3.736547', '0.02638055', '0.01431259', '0.001332348', '0.007420915', '2.742265E-05', '0.01531117', '0.01342688', '0.06951465', '0.0007733205', '0.001608273', '0.0002821884', '0.01819184', '0.003747145', '0.006059332', '0.004416403', '0.0005494867', '0.003234044', '0.03550832', '0.001167132', '0.02822473', '4.570188', '0.02454789\n'],
['2315393', 'LOC643837', '4', '2315380', '177', '213', '---', '---', '---', '---', '---', '---', 'chr01', '+', '785213', '785474', 'main', '1', '4', '0', '3', 'extended', 'false', 'false', 'false', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '7.096251', '6.779521', '7.248595', '6.796585', '7.911605', '7.346687', '7.426458', '7.562678', '7.325856', '7.387024', '7.007386', '7.165062', '7.464417', '6.946102', '7.301777', '6.803552', '7.177824', '7.045824', '7.400641', '6.989769', '5.31753E-05', '0.001531681', '0.0001322571', '0.0001710678', '8.730802E-06', '9.679551E-05', '1.908096E-05', '0.0001878275', '8.549917E-05', '3.309969E-05', '5.425196E-05', '4.703841E-05', '4.043191E-05', '0.0003847649', '5.951652E-06', '0.0001193639', '3.916246E-05', '0.0001156176', '0.0001095626', '0.000172881', '7.181908', '0.0002081298\n'],
['2315394', 'LOC643837', '4', '2315380', '177', '214', '---', '---', '---', '---', '---', '---', 'chr01', '+', '785580', '785741', 'main', '1', '4', '0', '3', 'extended', 'false', 'false', 'false', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '6.253515', '6.720881', '6.752228', '6.573003', '7.432106', '6.829571', '6.928901', '6.707009', '6.811303', '6.682736', '6.133654', '7.138803', '6.600315', '6.415293', '6.935129', '6.482844', '6.578277', '6.309853', '6.6063', '6.299486', '0.01781832', '0.009753694', '0.02208463', '0.01701757', '0.00360285', '0.01358681', '0.009195676', '0.02164155', '0.0104524', '0.01044872', '0.02825388', '0.005884029', '0.009311021', '0.02213507', '0.004283802', '0.02122111', '0.0164947', '0.026596', '0.04051208', '0.02065066', '6.491175', '0.02161905\n'],
['2315395', 'LOC643837', '4', '2315380', '178', '215', 'ENST00000425657', 'chr1', '100', '4', '4', 'FALSE', 'chr01', '+', '786805', '787167', 'main', '1', '4', '0', '4', 'extended', 'false', 'false', 'false', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '7.28299', '6.550652', '7.098108', '7.007628', '7.510951', '6.464728', '6.953759', '6.762228', '6.49962', '7.308725', '5.035019', '7.101415', '6.880146', '6.842373', '7.157195', '6.372715', '6.617693', '6.565038', '7.497246', '6.514267', '0.001518968', '0.01203297', '0.0009099616', '0.0007441015', '0.0009953923', '0.005674977', '0.0005635736', '0.005097853', '0.01051501', '0.0008013627', '0.171535', '0.000334578', '0.002451203', '0.0006916019', '7.179804E-05', '0.0006973377', '0.0006688746', '0.002025244', '0.0001584057', '0.002171834', '7.029811', '0.002278828\n'],
['2315396', 'LOC643837', '4', '2315380', '178', '216', 'NR_015368', 'chr1', '100', '4', '4', 'FALSE', 'chr01', '+', '787322', '787427', 'main', '1', '4', '0', '3', 'extended', 'false', 'false', 'false', '0', '2', '19', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9.651969', '9.952159', '10.48956', '9.485592', '11.00173', '10.05719', '9.481062', '9.472315', '10.18993', '10.19747', '8.919771', '9.502597', '9.802186', '8.654129', '9.384287', '8.938444', '9.013141', '9.399236', '9.561281', '9.10679', '2.608541E-07', '4.075629E-07', '2.922119E-08', '2.315187E-06', '1.222246E-08', '3.717686E-07', '6.13708E-07', '2.495084E-06', '8.563555E-08', '4.184732E-08', '5.745414E-06', '1.28446E-06', '1.210064E-06', '3.350116E-05', '2.465308E-07', '2.848452E-06', '3.867608E-06', '2.335294E-06', '2.027665E-07', '2.495084E-06', '9.356512', '7.21005E-06\n'],
['2315397', 'LOC643837', '4', '2315380', '178', '217', '---', '---', '---', '---', '---', '---', 'chr01', '+', '787602', '787744', 'main', '1', '4', '0', '3', 'extended', 'false', 'false', 'false', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '7.916404', '7.759287', '8.072448', '7.923687', '8.34563', '7.716464', '8.101598', '7.330042', '8.296576', '8.109077', '7.667806', '7.866546', '8.358614', '7.338192', '7.796195', '7.714562', '7.704663', '7.444373', '8.202391', '7.508609', '2.833008E-05', '0.0002040272', '8.472021E-05', '4.789891E-05', '2.071208E-05', '0.0002230732', '5.564653E-05', '0.0003971969', '2.665156E-05', '1.879434E-05', '8.967934E-05', '0.0001038349', '1.750609E-05', '0.0004434595', '3.284634E-05', '0.0001237327', '7.690299E-05', '0.0001449968', '4.30326E-05', '9.10167E-05', '7.818947', '8.066631E-05\n'],
['2315402', 'LOC643837', '4', '2315380', '179', '222', 'NR_015368', 'chr1', '100', '4', '4', 'FALSE', 'chr01', '+', '789403', '789651', 'main', '1', '4', '0', '3', 'extended', 'false', 'false', 'false', '0', '2', '4', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '7.676571', '8.076637', '8.479601', '7.134148', '9.252001', '8.140913', '7.249753', '7.509818', '8.671772', '8.558795', '7.195', '7.9313', '8.041945', '6.65743', '7.61948', '7.070879', '7.572503', '7.307683', '8.17798', '7.248854', '7.895925E-05', '3.951093E-05', '1.201304E-05', '0.0002904308', '8.432385E-07', '4.126632E-05', '0.0003439385', '0.0003292991', '5.587436E-06', '4.866839E-06', '0.0001506338', '5.603245E-05', '8.058763E-05', '0.0009831765', '4.605767E-05', '0.0004392554', '0.0001067854', '0.0002109056', '1.420402E-05', '0.000434449', '7.443322', '0.0004851876\n'],
['2315403', 'LOC643837', '4', '2315380', '179', '223', '---', '---', '---', '---', '---', '---', 'chr01', '+', '790040', '790240', 'main', '1', '4', '0', '4', 'extended', 'false', 'false', 'false', '0', '0', '4', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '5.998681', '6.763122', '6.692874', '6.545659', '7.002446', '6.411544', '5.767189', '6.377191', '6.829318', '7.183641', '5.544002', '6.133818', '5.92646', '5.189353', '5.924759', '5.398315', '5.494536', '6.382014', '5.76073', '5.583119', '0.0007539011', '0.0005030315', '0.0003977609', '0.0003189787', '0.0001276874', '0.0009272842', '0.001480047', '0.0008972476', '0.0001386041', '5.612451E-05', '0.004041488', '0.003849118', '0.00344545', '0.003858827', '0.0008146889', '0.003675722', '0.00353206', '0.0002586183', '0.01598129', '0.0008634967', '5.690257', '0.01008222\n'],
['2315404', 'LOC643837', '4', '2315380', '179', '224', '---', '---', '---', '---', '---', '---', 'chr01', '+', '790343', '790474', 'main', '1', '4', '0', '3', 'full', 'false', 'false', 'false', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '6.681634', '6.490887', '7.179345', '6.828182', '7.237892', '7.095804', '6.677108', '6.844277', '6.828619', '7.516214', '5.745057', '6.656887', '6.679102', '6.246146', '6.598435', '6.391132', '6.08237', '6.692116', '6.350447', '6.207737', '0.001694249', '0.007362651', '0.0008576859', '0.001519069', '0.0007526484', '0.001475951', '0.003035541', '0.002238279', '0.00168974', '0.0002171395', '0.02487287', '0.005698565', '0.002348677', '0.005798529', '0.001920031', '0.002701441', '0.009383661', '0.004524413', '0.00959978', '0.01244585', '6.943465', '0.003518951\n'],
['2315406', 'LOC643837', '4', '2315380', '181', '226', 'AK096570', 'chr1', '100', '3', '3', 'FALSE', 'chr01', '+', '791311', '791762', 'main', '1', '4', '0', '4', 'extended', 'true', 'false', 'false', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '7.56093', '7.705324', '8.077219', '7.404675', '8.355655', '7.830752', '7.507707', '7.78453', '8.214221', '8.422455', '6.555005', '6.9818', '7.623295', '6.846139', '6.822807', '7.090759', '7.121751', '7.322966', '7.45314', '7.13217', '0.001487796', '0.002206122', '0.0006104883', '0.001908991', '0.0002834305', '0.001638468', '0.001741613', '0.002034915', '0.000325661', '7.972609E-05', '0.02078551', '0.01919729', '0.001304073', '0.01117417', '0.009889563', '0.00507705', '0.005422852', '0.003171034', '0.01486553', '0.00369645', '7.450535', '0.009112225\n'],
['2315407', 'LOC643837', '4', '2315380', '181', '227', 'AK096570', 'chr1', '100', '4', '4', 'FALSE', 'chr01', '+', '791858', '792031', 'main', '1', '4', '0', '3', 'extended', 'true', 'false', 'false', '0', '0', '3', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '8.039328', '8.093384', '8.716998', '7.680675', '8.946162', '7.854662', '7.472647', '7.901449', '8.206901', '8.344068', '7.344572', '7.371565', '7.643939', '7.368361', '7.249219', '7.744545', '7.617923', '7.82731', '8.063888', '7.112111', '9.912838E-05', '8.731725E-05', '1.354037E-05', '0.0002296775', '8.973401E-06', '0.0002285018', '0.0003449775', '0.0003386512', '5.490997E-05', '2.156208E-05', '0.0008304156', '0.0005466292', '0.0003061671', '0.0003348816', '0.0005234557', '0.0003698929', '0.0002053366', '8.860275E-05', '9.431803E-05', '0.000684013', '7.645695', '0.0001325166\n'],
['2315408', 'LOC643837', '4', '2315380', '181', '228', 'AK096570', 'chr1', '100', '4', '4', 'FALSE', 'chr01', '+', '792034', '792456', 'main', '1', '4', '0', '4', 'extended', 'true', 'false', 'false', '0', '1', '4', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '7.985474', '8.099294', '8.698443', '7.949153', '8.82864', '7.992668', '7.198553', '7.992424', '8.680895', '8.673617', '7.382034', '7.82411', '7.8517', '7.140575', '7.868021', '7.113645', '7.642231', '7.906063', '8.120443', '6.962269', '0.0001068071', '0.0001106889', '2.365219E-05', '0.0001069801', '1.325218E-05', '0.0003786751', '0.00098062', '0.0001958739', '1.531E-05', '1.22931E-05', '0.00142251', '0.0001485347', '0.0002502929', '0.003194285', '0.0001973603', '0.0001341048', '0.0003211394', '9.682299E-05', '0.0001001362', '0.001895084', '8.257891', '0.001569496\n'],
['2315409', 'LOC643837', '4', '2315380', '181', '229', 'AK096570', 'chr1', '100', '4', '4', 'FALSE', 'chr01', '+', '792566', '792618', 'main', '1', '2', '0', '2', 'extended', 'true', 'false', 'false', '0', '1', '10', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '2.491029', '2.767133', '2.950691', '2.950559', '3.578194', '2.898754', '2.392702', '2.658859', '3.421858', '4.253962', '2.727294', '2.28101', '2.436202', '1.957944', '3.29996', '3.136175', '2.121248', '2.202365', '1.965888', '2.309946', '0.01468274', '0.005465514', '0.004600508', '0.00456251', '0.001399062', '0.002221709', '0.01324164', '0.0401154', '0.001754074', '0.0002701392', '0.01491942', '0.07988905', '0.02680076', '0.231745', '0.003149369', '0.01210092', '0.1181263', '0.1079827', '0.1195678', '0.05612267', '2.985653', '8.336259E-05\n'],
['2315410', 'LOC643837', '2', '2315380', '182', '230', 'AK091100', 'chr1', '100', '2', '2', 'FALSE', 'chr01', '+', '793023', '793050', 'main', '1', '1', '0', '1', 'full', 'true', 'false', 'false', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '8.492989', '8.211477', '8.563873', '7.933398', '8.180374', '8.579865', '8.645555', '8.312296', '7.991052', '8.150532', '8.458834', '8.582409', '7.888633', '8.2747', '7.994466', '8.176979', '8.050029', '8.268483', '8.753799', '8.418043', '0.1004064', '0.1586478', '0.1227495', '0.2008435', '0.2092417', '0.1390539', '0.1000839', '0.1755198', '0.1794315', '0.1487426', '0.1036818', '0.125904', '0.2183644', '0.1189402', '0.1653713', '0.1947184', '0.1550374', '0.1443489', '0.109698', '0.08709072', '8.121534', '0.1698343\n'],
['2315411', 'LOC643837', '4', '2315380', '183', '231', 'AK091100', 'chr1', '100', '4', '4', 'FALSE', 'chr01', '+', '793760', '794515', 'main', '1', '4', '0', '4', 'extended', 'true', 'true', 'false', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '5.993575', '6.200627', '5.69593', '5.750837', '5.871135', '5.970676', '5.754993', '5.179656', '6.815498', '6.163512', '5.36482', '6.247602', '6.139235', '5.225448', '5.920146', '5.088842', '5.295302', '6.320735', '6.213931', '5.859531', '0.001240172', '0.009171671', '0.06627857', '0.02202989', '0.03322085', '0.01686121', '0.01869639', '0.04775167', '0.0008234964', '0.002880638', '0.02097791', '0.007025113', '0.01669808', '0.05523146', '0.01113646', '0.001996666', '0.03810698', '0.001982465', '0.00752777', '0.01803146', '6.435949', '0.06425171\n'],
{'3_0861-08': 'RA', '9_0315-09': 'healthy', '0847_08.AVG_Beta': 'RARS', '1079-08': 'RAEB', '1062_08.AVG_Beta': 'RARS', '11_0327-09': 'healthy', '0791': 'RA', '0826-08': 'RARS', '7_0303-09': 'healthy', '10_0321-09': 'healthy', '1307_09.AVG_Beta': 'RARS', 'n0315_09.AVG_Beta': 'healthy', '0865_08.AVG_Beta': 'RAEB', '0874_08.AVG_Beta': 'RARS', '0940-08': 'RARS', '6_0944-08': 'RARS', '8_0309-09': 'healthy', '1307-09': 'RARS', '1079_08.AVG_Beta': 'RAEB', '0940_08.AVG_Beta': 'RARS', '0856-08': 'RAEB', 'n0321_09.AVG_Beta': 'healthy', '4_0874-08': 'RARS', '1062-08': 'RARS', '0861_08.AVG_Beta': 'RA', '0834_08.AVG_Beta': 'RARS', '0826_08.AVG_Beta': 'RARS', '0980-08': 'RARS', '0944_08.AVG_Beta': 'RARS', 'n0327_09.AVG_Beta': 'healthy', '0952-08': 'RAEB', '0952_08.AVG_Beta': 'RAEB', '0890_08.AVG_Beta': 'RA', '2_0847-08': 'RARS', '0834-08': 'RARS', '0791_08.AVG_Beta': 'RA', '5_0890-08': 'RA', 'n0309_09.AVG_Beta': 'healthy', 'n0303_09.AVG_Beta': 'healthy', '0980_08.AVG_Beta': 'RARS'}]

values = values[1:len(values) - 1]
trans = getExon(1, values)
for t in trans:print t

fig = plt.figure()
ax = fig.add_subplot(211)
i=len(trans)+1
for t in trans:
    j=0
    while j<len(t):
        if j<len(t)-1:
            if t[j+1][0]==t[j][0]+1 and long(t[j+1][1]) == long(t[j][1]):
                s=j
                while t[j+1][0]==t[j][0]+1 and long(t[j+1][1]) == long(t[j][1]):
                    j=j+1
                    if j==len(t)-1:
                        break                        
                rect = patches.Rectangle((t[s][0],i), j-s+1, 0.5, edgecolor='black',facecolor='grey')
                ax.add_patch(rect)
            else:                
                rect= patches.Rectangle((t[j][0],i), 1, 0.5, edgecolor='black',facecolor='grey')
                ax.add_patch(rect)
        j=j+1
    i=i-1
plt.plot(range(10))
ax = fig.add_subplot(212)
plt.plot(range(10))
    
  
    for e in t:
        rect = matplotlib.patches.Rectangle((e[0],i), 1, 0.5, edgecolor='black',facecolor='grey')
        ax.add_patch(rect)
    i=i-1


#plt.xlim([-1,trans[0][len(trans)-1][0]+20])
#plt.ylim([0,2*len(trans)+5])
plt.xlim([-1,35])
plt.ylim([0,4])
plt.show()
"""
"""
probeset 5 start 7576127 stop 7576155
probeset 6 start 7576944 stop 7577006

exon 1 start 7573926 stop 7574033
exon 2 start 7576852 stop 7576926
exon 3 start 7577018 stop 7577155
"""
exonstart= [7571719,7573926,7576852,7577018,7577498,7578176,7578370,7579311,7579699,7590694]
exonstop= [7573008,7574033,7576926,7577155,7577608,7578289,7578554,7579590,7579940,7590868]
probesetstart=[7571850,7572949,7573061,7573164,7573987,7576127,7576944,7577049,7577187,7577502,7578016,7578195,7578375,7579032,7579340,7579520,7579864,7579950,7580686,7580763,7582171,7585728,7588589,7589126,7589385,7590817]
probesetstop =[7572843,7572988,7573102,7573609,7574024,7576155,7577006,7577135,7577319,7577571,7578063,7578253,7578549,7579232,7579378,7579587,7579906,7580019,7580715,7580924,7582572,7585903,7588754,7589193,7589962,7591019]
intron=[]
exon = []
"""
i=0
while i<len(exonstart):
    exon.append([exonstart[i],exonstop[i]])
    i=i+1
i=0
while i<len(exonstart)-1:
    intron.append([exonstop[i],exonstart[i+1]])
    i=i+1

print exon
print intron
"""
"""
i=0
while i < len(exonstart):
    j=0
    while j < len(probesetstart):
        if exonstart[i] <= probesetstart[j] and probesetstop[j] <= exonstop[i]:
            print 'exon at probeset '+str(j)+' exon id '+str(i)
        j=j+1
    i=i+1
i=0
print '\n'
while i < len(exonstart):
    j=0
    while j < len(probesetstart):
        if exonstop[i] <= probesetstart[j] and probesetstop[j] <= exonstart[i+1]:
            print 'intron at probeset '+str(j)+' intron id '+str(i)
        j=j+1
    i=i+1    

print '\nlaenge exonstart '+str(len(exonstart))
print 'laenge probesetstart '+str(len(probesetstart))

"""

ax = subplot(1,1,1)
p1, = ax.plot([1,2,3], label="line 1")
p2, = ax.plot([3,2,1], label="line 2")
p3, = ax.plot([2,3,1], label="line 3")

handles, labels = ax.get_legend_handles_labels()

# reverse the order
ax.legend(handles[::-1], labels[::-1])

# or sort them by labels
import operator
hl = sorted(zip(handles, labels),
            key=operator.itemgetter(1))
handles2, labels2 = zip(*hl)

ax.legend(handles2, labels2)


